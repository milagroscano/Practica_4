if (unidad = "ms") {
convertir_viento <- function(viento, unidad) {
if (unidad == "ms") {
salida <- return(ms_a_nudos(salida))
} else if (unidad == "nudos") {
salida <- return(nudos_a_ms(salida))
} else {
print("viento no es numérico")
}
}
convertir_viento(25, "nudos")
salida <- 0
convertir_viento <- function(viento, unidad) {
if (unidad == "ms") {
salida <- return(ms_a_nudos(salida))
} else if (unidad == "nudos") {
salida <- return(nudos_a_ms(salida))
} else {
print("viento no es numérico")
}
}
convertir_viento(25, "nudos")
convertir_viento <- function(viento, unidad) {
if (unidad == "ms") {
return(ms_a_nudos(viento))
} else if (unidad == "nudos") {
return(nudos_a_ms(viento))
} else {
print("viento no es numérico o la unidad no es aceptable")
}
}
convertir_viento(25, "nudos")
nudos_a_ms(25)
convertir_viento(12, "ms")
ms_a_nudos(12)
# otra opcion
convertir_viento2 <- function(viento, unidad) {
if (unidad == "ms") {
salida <- ms_a_nudos(viento)
} else if (unidad == "nudos") {
salida <- nudos_a_ms(viento)
} else {
salida <- NULL
print("viento no es numérico o la unidad no es aceptable")
} return(salida)
# otra opcion
convertir_viento2 <- function(viento, unidad) {
if (unidad == "ms") {
salida <- ms_a_nudos(viento)
} else if (unidad == "nudos") {
salida <- nudos_a_ms(viento)
} else {
salida <- NULL
print("viento no es numérico o la unidad no es aceptable")
}
}  return(salida)
# otra opcion
convertir_viento2 <- function(viento, unidad) {
if (unidad == "ms") {
salida <- ms_a_nudos(viento)
} else if (unidad == "nudos") {
salida <- nudos_a_ms(viento)
} else {
salida <- NULL
print("viento no es numérico o la unidad no es aceptable")
}
return(salida)
}
convertir_viento2(25, "nudos")
convertir_viento2(25, "nud")
convertir_viento2(f, "nudos")
convertir_viento2("f", "nudos")
convertir_viento(12, "m")
# Posible solucion del campus
convertir_viento3 <- function(viento, unidad = "ms") {
if (!(unidad %in% c("ms", "nudos"))) stop("Argumento unidad invalido")
if (unidad == "nudos") {
out <- ms_a_nudos(viento)
} else if (unidad == "ms") {
out <- nudos_a_ms(viento)
}
return(out)
}
convertir_viento3(25, "nud")
rm(list = ls())
# Ejemplo:
# genero la lista familia
familia <- list("Maria","Juana", 10, c("Hugo", "Paula"), c(8,7))
familia
dim(familia)
# Agrego nombres a los elementos de la lista
familia2 <- list(madre = "Maria", tia = "Juana", casados = 10,hijos = c("Hugo","Paula"), edades = c(8, 6))
familia2
familia2[2]
class(familia2[2])
# Acceder a un elemento de la lista e indexación
# Veo el conteiner de afuera
familia2[2]
class(familia2[2])
familia2["tia"]
class(familia2["tia"])
familia2[c(2,4)]
class(familia2[c(2,4)])
familia2[c("tia", "hijos")]
class(familia2[c("tia", "hijos
class(familia2[c("tia", "hijos")])
familia2[c("tia", "hijos")]
class(familia2[c("tia", "hijos")])
familia$mascotas <- "Gato"
familia
familia[7] <- "Auto"
familia
familia$edades <- NULL
familia
familia[[5]] <- NULL
familia
# Concatenacion de listas
familia_2 <- list(mascotas = "Gato", vacaciones_favoritas = c("Mar del Plata", familia_concatenada <- c(familia, familia_2)
familia_concatenada
# Concatenacion de listas
familia_2 <- list(mascotas = "Gato", vacaciones_favoritas = c("Mar del Plata"))
familia_concatenada <- c(familia, familia_2)
familia_concatenada
# Operaciones avanzadas con listas ----------
mi_lista <- list(x = c(1, 3, 5), y = c(2, 2, 3))
lapply(mi_lista, function(x) mean(x)
# Operaciones avanzadas con listas ----------
mi_lista <- list(x = c(1, 3, 5), y = c(2, 2, 3))
lapply(mi_lista, function(x) mean(x))
# Ejercicio
# ▶ Generar una lista en cuyo primer elemento haya un vector de caracteres con los nombres de los y las alumnas presentes en
# clase y cuyo segundo elemento sea un vector con las edades de los y las alumnas
alumnos <- list(nombres = c("Sol", "Domi", "Sabri", "Lucas"), edades = c(23, 21, 24, 23))
alumnos
# ▶ Hacer un promedio de las edades y añadirlo a la lista como tercer elemento
alumnos[3] <- "promedio"
alumnos
# ▶ Hacer un promedio de las edades y añadirlo a la lista como tercer elemento
promedio <- mean(alumnos[[edades]])
alumnos$edades
# ▶ Hacer un promedio de las edades y añadirlo a la lista como tercer elemento
promedio <- mean(alumnos$edades)
alumnos$promedio <- promedio
alumnos
# Ejercicio
rm(list = ls())
# ▶ Generar una lista en cuyo primer elemento haya un vector de caracteres con los nombres de los y las alumnas presentes en
# clase y cuyo segundo elemento sea un vector con las edades de los y las alumnas
alumnos <- list(nombres = c("Sol", "Domi", "Sabri", "Lucas"), edades = c(23, 21, 24, 23))
alumnos
# ▶ Hacer un promedio de las edades y añadirlo a la lista como tercer elemento
promedio <- mean(alumnos$edades)
alumnos$promedio <- promedio
alumnos
# ▶ Calcular la longitud de cada elemento de la lista usando lapply
lapply(alumnos, function(alumnos[]) length(alumnos[]))
# ▶ Calcular la longitud de cada elemento de la lista usando lapply
lapply(alumnos, function(alumnos[c(1,2,3)]) length(alumnos[c(1,2,3)]))
# ▶ Calcular la longitud de cada elemento de la lista usando lapply
lapply(alumnos, function() length())
# ▶ Calcular la longitud de cada elemento de la lista usando lapply
lapply(alumnos, function(alumnos[[]]) length(alumnos[[]]))
# ▶ Calcular la longitud de cada elemento de la lista usando lapply
lapply(alumnos, function(x) length(x))
matriz = matrix(NA, nrow = 30, ncol = 20)
matriz
rm(list = ls())
file.create("/home/clinux01/Descargas/UnVec.txt")
file.exists()
file.exists("/home/clinux01/Descargas/UnVec.txt")
file.remove("/home/clinux01/Descargas/UnVec.txt")
file.copy("/home/clinux01/Descargas/UnVec.txt", "/home/clinux01/Descargas/Caudales01.txt")
file.copy("/home/clinux01/Descargas/UnVec.txt", "/home/clinux01/Descargas/Caudales01.txt", overwrite = T)
vec <- scan("UnVec.txt")
setwd("/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/")
vec <- scan("UnVec.txt")
vec <- scan("/home/clinux01/Descargas/UnVec.txt")
setwd("/home/clinux01/Descargas/")
vec <- scan("/home/clinux01/Descargas/UnVec.txt")
##################################################333
WKDIR = "/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/"
setwd(WKDIR)
vec <- scan("/home/clinux01/Descargas/UnVec.txt")
vec <- scan("UnVec.txt")
print(vec)
vec2 <- scan("IntVec.txt", integer())
file.create("/home/clinux01/Descargas/UnVec.txt")
##################################################333
WKDIR = "/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/"
setwd(WKDIR)
vec <- scan("UnVec.txt")
##################################################333
WKDIR = "/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/"
setwd(WKDIR)
vec <- scan("UnVec.txt")
print(vec)
vec2 <- scan("IntVec.txt", integer())
vec2 <- scan("IntVec.txt", integer())
print(vec2) ; class(vec2)
vec <- scan("UnVec.txt")
scan("IntVec.txt", integer(), skip = 2)
vec2 <- scan("IntVec.txt", integer())
scan("IntVec.txt", integer(), skip = 2)
scan("IntVec.txt", integer(), skip = 1)
vec <- scan("UnVec.txt")
vec <- scan("UnVec.txt")
print(vec)
x <- matrix(1:10, ncol = 5)
x
write(x)
getwd()
# 2. Abramos el archivo “data” para ver como escribio los datos
# 3. Ahora escribamos la matriz traspuesta en el mismo archivo, y con un formato donde las columnas estan separadas por tabulaciones
write(t(x), sep = "\t", append=T)
unlink("data") # borra el archivo donde estuvo escribiendo los datos
# 4. Tambien podemos usar el comando write para escribir en pantalla
write(x, "", sep = "\t") # en el lugar del archivo colocamos comillas
# 2. Abramos el archivo “data” para ver como escribio los datos
# 3. Ahora escribamos la matriz traspuesta en el mismo archivo, y con un formato donde las columnas estan separadas por tabulaciones
write(t(x), sep = "\t", append=T)
# 4. Tambien podemos usar el comando write para escribir en pantalla
write(x, "", sep = "\t") # en el lugar del archivo colocamos comillas
unlink("data") # borra el archivo donde estuvo escribiendo los datos
library(MASS, lib.loc = "/usr/lib/R/library")
library(MASS)
require(MASS)
l = matrix(rnorm(10000), ncol=10)
l = matrix(rnorm(10000), ncol=10)
write.matrix(l, file="matriz1000x10")
write.matrix(l, file="matriz1000x10b", blocksize = 100)
head(l)
# write.table - sirve para leer en formato data.frame
#creo un data frame
x <- data.frame(a = I("a \ quote"), b = pi)
head(x)
x
write.table(x, file = "foo.txt", sep = ",", col.names = NA, qmethod = "double")
write.table(x, file = "foo2.txt", sep = ",")
# COMPARAR write.matrix (en el paquete MASS) y write.table con write
# Precisión, nombres filas y columnas
# EJEMPLO
# 1. Crear una matriz “a” de 100 datos aleatorios con 10 columnas
a = matrix(rnorm(100), ncol=10)
# 2. Cargar la libreria MASS con require(MASS)
# 3. Escribir la matriz “a” en el archivo matriz_a.txt usando write.matrix
write.matrix(a, file="matriz_a.txt")
# 4. Escribir la matriz “a” en el mismo archivo con write y la opción append=TRUE
write(a, append = T)
# 5. Escribir la matriz “a” en el mismo archivo con write.table y la opción append=TRUE
write.table(a, append = T)
# 2. Cargar la libreria MASS con require(MASS)
# 3. Escribir la matriz “a” en el archivo matriz_a.txt usando write.matrix
write.matrix(a, file="matriz_a.txt")
# 4. Escribir la matriz “a” en el mismo archivo con write y la opción append=TRUE
write(a, file="matriz_a.txt", append = T)
# 5. Escribir la matriz “a” en el mismo archivo con write.table y la opción append=TRUE
write.table(a, file="matriz_a.txt", append = T)
# EJEMPLO 2
# 1. Crear la matriz b de 10 columnas a partir del vector
b=c(1:95,NA,NA,NaN,NaN,Inf)
matriz_b <- matrix(b, ncol=10)
write.matrix(matriz_b, file="matriz_b.txt")
write(matriz_b, file="matriz_b.txt", append = T)
write.table(matriz_b, file="matriz_b.txt", append = T)
# write.csv y write.csv2
write.csv(x, file = "foo.csv") #o bien
write.csv(x, file = "foo2.csv", row.names = FALSE) #abrir archivos y ver diferencias
write.csv2(x, file = "foo.csv2", row.names = FALSE) #y con este??
#read.fwf cat
ff <- tempfile()
cat(file = ff, "123456", "987654", sep = "\n")
read.fwf(ff, widths = c(1,2,3)) #> 1 23 456 \ 9 87 654
read.fwf(ff, widths = c(1,-2,3)) # 1 456 \ 9 654
unlink(ff)
cat(file = ff, "123", "987654", sep = "\n")
read.fwf(ff, widths = c(1,0, 2,3))
cat(file = ff, "123456", "987654", sep = "\n")
read.fwf(ff, widths = list(c(1,0, 2,3), c(2,2,2))) #> 1 NA 23 456 98 76 54
ff
## CASO 1
# Limpio el espacio de trabajo
rm(list=ls())
# Lectura
dir_datos="/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/Caudales01.txt"
a<-scan(dir_datos)
a
# CASO 2: tabla conteniendo columnas de números mas leyendas
# Archivo a leer: Caudales04.txt (slide anterior)
# Funcion: read.table
# Limpio el espacio de trabajo
rm(list=ls())
# Leo los datos
# considerar "dato" los números que encuentra
dir_datos="/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/Caudales04.txt"
datos2=read.table(dir_datos,nrows=24,skip=11) # el 11 indica cuantas líneas salta antes
datos2
class(datos2)
# Limpio el espacio de trabajo para estudiar otro ejemplo
# en este caso cambio el ultimo flag (11 a 35)
rm(list=ls())
# Leo los datos (el 36 indica cuantas líneas salta antes de
# considerar "dato" los números que encuentra
dir_datos="/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/Caudales04.txt"
datos2=read.table(dir_datos,nrows=3,skip=36)
datos2
# CASO 3:tabla conteniendo columnas de numeros mas leyendas
# Archivo a leer: Caudales04.txt
# Funcion read.table
# Leer los datos de latitud, longitud, altitud y area. Conservarlos como un arreglo
# numerico para eventualmente operar con ellos.
rm(list=ls())
dir_datos="/home/clinux01/Escritorio/LaboAtm2023/ClasesTeo/Caudales04.txt"
#primera forma usando scan
datos1=scan(dir_datos,character(),nmax=28)
datos1
#creo una matriz solo con los datos que me interesan
latitud1=as.integer(c(datos1[7],datos1[8],datos1[9]))
longitud1=as.integer(c(datos1[14],datos1[15],datos1[16]))
altitud1=as.integer(c(datos1[21],NA,NA))
area1=as.integer(c(datos1[28],NA,NA))
parametros1=rbind(latitud1,longitud1,altitud1,area1)
parametros1
datos1
#segunda forma usando read.fwf
datos2=read.fwf(dir_datos,widths = list(c(15,-39,21,-30,9,-7,2,-1,2,-1,2),c(16,-2,10,-78,10,-5,2,-1,2,-1,2),c(17,-89,14,-6,3),c(25,-81,11,-9,3)),n=1)
#tercera forma usando read.table
datos3=read.table(dir_datos,nrows=4,fill=TRUE)
datos3
#segunda forma usando read.fwf
datos2=read.fwf(dir_datos,widths = list(c(15,-39,21,-30,9,-7,2,-1,2,-1,2),c(16,-2,10,-78,10,-5,2,-1,2,-1,2),c(17,-89,14,-6,3),c(25,-81,11,-9,3)),n=1)
# Leer el archivo test1.dat que contiene la siguiente información:
datos <- scan(file= "test1.dat")
# Leer el archivo test1.dat que contiene la siguiente información:
datos <- scan(file= "test1.dat", sep =",")
datos
nlat <- 181 #cantidad total de la dimension y (o latitudes)
# EJEMPLO
# Vamos a trabajar con los archivos data.ctl y data.r4
# Es conveniente primero definir las dimensiones del archivo y el código del
# dato faltante en función de los datos del archivo .ctl
rm(list = ls())
nlat <- 181 #cantidad total de la dimension y (o latitudes)
nlon <- 360 #cantidad total de la dimension x (o longitudes)
ntiempos<- 348 #cantidad total de la dimension time (tiempos)
nnivel<- 1 #cantidad total de la dimension z (o niveles)
nvar <- 1 #Cantidad total de variables
dato_faltante<- -999
## N que va a ser longitud del vectorque voy a leer del binario
N<- nlat*nlon*ntiempos*nnivel*nvar
# Ahora puedo abrir leer el archivo binario a partir de la funcion readBin
## antes defino la ruta donde esta el archivo
archivo <- "/home/clinux01/Descargas/data.r4"
# ahora si abro los datos
datos<- readBin(archivo, "numeric", n = N, endian = "big", size = 4)
# ahora si abro los datos
datos <- readBin(archivo, "numeric", n = N, endian = "big", size = 4)
# el archivo es de precision simple (4bytes) y es un archivo big endian (lo sabemos de ante mano)
length(datos)
class(datos)
N
# Ahora puedo cambiar los datos que sean faltantes por NA
datos[which(datos== dato_faltante)] <- NA
datos_array<- array(data = datos, dim = c(nlon, nlat, ntiempos))
dim(datos_array)
# creo el vector latitudes
latitudes <- seq(-90,90,1)
# chequeo que tenga como longitud 181
length(latitudes)
# creo el vector longitudes
longitudes <- seq(0,359,1)
# chequeo que tenga como longitud 181
length(longitudes)
latitudes
lat_arg <- latitudes[-55:-20]
lat_arg
lat_arg <- latitudes[(-55):(-20)]
lat_arg
lat1_arg <- latitudes[which(latitudes=-55)]
latitudes[which(latitudes==-55)]
which(latitudes==-55)
pos2 <- which(latitudes==-20)
pos2
lat_arg <- latitudes[36:71]
lat_arg
lat_arg <- latitudes[pos1:pos2]
pos1 <- which(latitudes==-55)
pos2 <- which(latitudes==-20)
lat_arg <- latitudes[pos1:pos2]
lat_arg
longitudes
pos_1 <- which(longitudes==285)
pos_2 <- which(longitudes==310)
long_arg <- longitudes[pos_1:pos_2]
pos_1
pos_2
long_arg
datos_arg <- datos_array[long_arg, lat_arg,]
dim(datos_arg)
length(long_arg)
length(lat_arg)
prom_anual <- apply(datos_array, c(1,2), mean)
dim(prom_anual)
prom_anual
dim(datos_arg)
prom_anual <- apply(datos_array, c(1,2), mean,na.rm=TRUE)
prom_anual
prom_anual <- apply(datos_array, c(1,2), mean,rm.na=TRUE)
prom_anual
prom_anual <- apply(datos_array, c(1,2),FUN = "mean",na.rm=TRUE)
prom_anual
dim(prom_anual)
348/12
dim(datos_arg)
pos_1 <- which(longitudes==285)
pos_2 <- which(longitudes==310)
long_arg <- longitudes[pos_1:pos_2]
datos_arg <- datos_array[long_arg, lat_arg,]
dim(datos_arg)
datos_arg2 <- array(datos_arg, dim(26, 145, 12, 29))
datos_arg2 <- array(datos_arg, dim = c(26, 145, 12, 29))
# realizo el promedio anual
prom_anual <- apply(datos_array, c(1,2,4),FUN = "mean",na.rm=TRUE)
# realizo el promedio anual
prom_anual <- apply(datos_array, c(1,2,4), FUN = mean, na.rm=TRUE)
# realizo el promedio anual
prom_anual <- apply(datos_arg2, c(1,2,4), mean)
dim(prom_anual)
pos1 <- which(latitudes==-55)
pos2 <- which(latitudes==-20)
lat_arg <- latitudes[pos1:pos2]
pos_1 <- which(longitudes==285)
pos_2 <- which(longitudes==310)
long_arg <- longitudes[pos_1:pos_2]
datos_arg <- datos_array[long_arg, lat_arg,]
dim(datos_arg)
length(lat_arg)
length(lon_arg)
length(long_arg)
datos_arg <- datos_array[pos_1:pos_2, pos1:pos2,]
dim(datos_arg)
# 348/12 = 29, es decir 29 años
datos_arg2 <- array(datos_arg, dim = c(26, 145, 12, 29))
# realizo el promedio anual
prom_anual <- apply(datos_arg2, c(1,2,4), mean)
dim(prom_anual)
# 348/12 = 29, es decir 29 años
datos_arg2 <- array(datos_arg, dim = c(26, 36, 12, 29))
# realizo el promedio anual
prom_anual <- apply(datos_arg2, c(1,2,4), mean)
dim(prom_anual)
rm(list = ls())
nlat <- 181 #cantidad total de la dimension y (o latitudes)
nlon <- 360 #cantidad total de la dimension x (o longitudes)
ntiempos<- 6 #cantidad total de la dimension time (tiempos)
nnivel<- 1 #cantidad total de la dimension z (o niveles)
nvar <- 4 #Cantidad total de variables
dato_faltante<- 9.999E+20
archivo <- "/home/clinux01/Descargas/SepIC_nmme_tmpsfc_anom_stdanom.dat"
# ahora si abro los datos
datos <- readBin(archivo, "numeric", n = N, endian = "big", size = 4)
# el archivo es de precision simple (4bytes) y es un archivo big endian (lo sabemos de ante mano)
length(datos)
N<- nlat*nlon*ntiempos*nnivel*nvar
# ahora si abro los datos
datos <- readBin(archivo, "numeric", n = N, endian = "big", size = 4)
# el archivo es de precision simple (4bytes) y es un archivo big endian (lo sabemos de ante mano)
length(datos)
# Chequeo que N sea igual
N
# Ahora puedo cambiar los datos que sean faltantes por NA
datos[which(datos== dato_faltante)] <- NA
# reacomodo los datos en un array
datos_array<- array(data = datos, dim = c(nlon, nlat, ntiempos, nvar))
dim(datos_array)
datos_dic <- datos_array[c(,,4,)]
datos_dic <- datos_array[,,4,]
dim(datos_dic)
datos_dic
# reacomodo los datos en un array
datos_array<- array(data = datos, dim = c(nlon, nlat, nvar, ntiempos))
dim(datos_array)
datos_dic <- datos_array[,,4,4]
dim(datos_dic)
# defino el area de argentina
lat_inicio <- which(latitudes==-55)
lat_final <- which(latitudes==-20)
long_inicio <- which(longitudes==285)
long_final <- which(longitudes==310)
datos_arg <- datos_array[long_inicio:long_final, lat_inicio:lat_final,]
dim(datos_arg)
# creo el vector latitudes
latitudes <- seq(-90,90,1)
# chequeo que tenga como longitud 181
length(latitudes)
# creo el vector longitudes
longitudes <- seq(0,359,1)
# chequeo que tenga como longitud 360
length(longitudes)
# defino el area de argentina
lat_inicio <- which(latitudes==-55)
lat_final <- which(latitudes==-20)
long_inicio <- which(longitudes==285)
long_final <- which(longitudes==310)
datos_arg <- datos_array[long_inicio:long_final, lat_inicio:lat_final,]
dim(datos_arg)
datos_arg <- datos_array[long_inicio:long_final, lat_inicio:lat_final,,]
dim(datos_arg)
# me quedo con los datos de la variable anomalia para el mes de diciembre en argentina
datos_arg_dic <- datos_arg[,,4,4]
dim(datos_arg_dic)
floor(2.51)
trunc(2.51)
